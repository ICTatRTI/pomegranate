// Generated by CoffeeScript 1.6.2
(function() {
  $(function() {
    var Pomegranate;

    Pomegranate = {
      config: {
        database_name: "pomegranate",
        remote_url: "http://mikeymckay.iriscouch.com/pomegranate",
        number_of_past_days_to_store_in_db: 10
      }
    };
    return $(document).on("deviceready", function() {
      var db, error, getAllSmsAfterCutoffSaveInDB, getAllSmsSaveInDB, log, saveResults, smsByTimeReceived;

      cordova.execute = function(options) {
        return cordova.exec(options.success, options.error, options.plugin.name, options.plugin["function"], options.plugin.args);
      };
      smsByTimeReceived = function(doc) {
        if (doc.time_received) {
          return emit(doc.time_received, null);
        }
      };
      log = function(message) {
        console.log(message);
        return $("#log").prepend(message + "<br/>");
      };
      saveResults = function(results) {
        if (results.texts.length !== 0) {
          return db.bulkDocs({
            docs: _(results.texts).map(function(text) {
              text._id = "" + text.time_received + "+" + text.from;
              return text;
            })
          }, function(error, response) {
            if (error != null) {
              log("Error while bulk savings: " + (JSON.stringify(error)));
            }
            if (response != null) {
              return log("Saved " + response.length + " items");
            }
          });
        }
      };
      getAllSmsSaveInDB = function() {
        return cordova.execute({
          success: saveResults,
          error: function(error) {
            return log("Error while saving: " + (JSON.stringify(error)));
          },
          plugin: {
            name: "ReadSms",
            "function": "GetTexts",
            args: ["", -1]
          }
        });
      };
      getAllSmsAfterCutoffSaveInDB = function(cutoff) {
        return cordova.execute({
          success: saveResults,
          error: function(error) {
            return log("Error while saving: " + (JSON.stringify(error)));
          },
          plugin: {
            name: "ReadSms",
            "function": "GetTextsAfter",
            args: ["", cutoff, -1]
          }
        });
      };
      error = function(error) {
        return log("Error: " + (JSON.stringify(error)));
      };
      log("setting up DB");
      db = new PouchDB(Pomegranate.config.database_name);
      db.query({
        map: smsByTimeReceived
      }, {
        reduce: false,
        limit: 1,
        include_docs: true,
        descending: true
      }, function(error, response) {
        var cuttoffDate;

        if (error != null) {
          log(JSON.stringify(error));
        }
        if (response != null) {
          log(JSON.stringify(response));
        }
        if (response.rows.length === 0) {
          cuttoffDate = moment().subtract('days', Pomegranate.config.number_of_past_days_to_store_in_db).valueOf();
          log("No SMSs in DB, loading SMSs from past " + Pomegranate.config.number_of_past_days_to_store_in_db + " day(s): " + cuttoffDate + ".");
          return getAllSmsAfterCutoffSaveInDB(cuttoffDate);
        } else {
          log("Getting messages after " + response.rows[0].doc.time_received + " and adding them to DB");
          return getAllSmsAfterCutoffSaveInDB(response.rows[0].doc.time_received);
        }
      });
      db.info(function(database_info) {
        db.changes({
          continuous: true,
          include_docs: true,
          filter: function(doc) {
            return doc.to && doc.message && !doc.processed;
          },
          onChange: function(doc) {
            log("SMS to send: " + (JSON.stringify(doc)));
            cordova.exec(null, null, 'SmsPlugin', "SendSMS", [doc.to, doc.message]);
            return;
            return cordova.execute({
              success: function() {
                log("SMS sent: " + (JSON.stringify(doc)));
                doc.processed = true;
                return db.put(doc);
              },
              error: function(error) {
                return log("Error on sending SMS: " + (JSON.stringify(doc)) + ", error: " + (JSON.stringify(error)));
              },
              plugin: {
                name: "SmsPlugin",
                "function": "SendSMS",
                args: [doc.to, doc.message]
              }
            });
          }
        });
        return db.changes({
          continuous: true,
          include_docs: true,
          filter: function(doc) {
            return doc.time_received && !doc.processed;
          },
          onChange: function(doc) {
            log("SMS received but not processed: " + (JSON.stringify(doc)));
            doc.processed = true;
            return db.put(doc);
          }
        });
      });
      $("#send").click(function() {
        doc.to = $("#to");
        doc.message = $("#message");
        doc.time_created = Date.now();
        doc._id = "" + doc.time_received + "+" + text.to;
        return db.put(doc);
      });
      log("Beginning replication");
      PouchDB.replicate(Pomegranate.config.database_name, Pomegranate.config.remote_url, {
        continuous: true
      });
      return PouchDB.replicate(Pomegranate.config.remote_url, Pomegranate.config.database_name, {
        continuous: true,
        onChange: function(change) {
          return log("Replication from cloud caused a change: " + (JSON.stringify(change)));
        }
      });
    });
  });

}).call(this);
