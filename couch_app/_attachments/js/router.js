// Generated by CoffeeScript 1.6.3
var Group, GroupManager, Groups, Message, People, Person, Pomegranate, Router, SendView, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Router = (function(_super) {
  __extends(Router, _super);

  function Router() {
    _ref = Router.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Router.prototype.routes = {
    "login": "login",
    "send": "send",
    "": "send"
  };

  Router.prototype.send = function() {
    var groupManager, sendView;
    sendView = new SendView();
    sendView.render();
    groupManager = new GroupManager;
    return groupManager.render();
  };

  Router.prototype["default"] = function() {
    var landingView;
    return landingView = new LandingView();
  };

  return Router;

})(Backbone.Router);

Person = (function(_super) {
  __extends(Person, _super);

  function Person() {
    _ref1 = Person.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  Person.prototype.url = "person";

  return Person;

})(Backbone.Model);

People = (function(_super) {
  __extends(People, _super);

  function People() {
    _ref2 = People.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  People.prototype.url = "person";

  People.prototype.model = Person;

  return People;

})(Backbone.Collection);

Group = (function(_super) {
  __extends(Group, _super);

  function Group() {
    _ref3 = Group.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  Group.prototype.url = "group";

  return Group;

})(Backbone.Model);

Groups = (function(_super) {
  __extends(Groups, _super);

  function Groups() {
    _ref4 = Groups.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  Groups.prototype.url = "group";

  Groups.prototype.model = Group;

  return Groups;

})(Backbone.Collection);

GroupManager = (function(_super) {
  __extends(GroupManager, _super);

  function GroupManager() {
    this.updateGroups = __bind(this.updateGroups, this);
    this.render = __bind(this.render, this);
    this.onGroupRemove = __bind(this.onGroupRemove, this);
    this.onGroupEdit = __bind(this.onGroupEdit, this);
    this.onPersonRemove = __bind(this.onPersonRemove, this);
    _ref5 = GroupManager.__super__.constructor.apply(this, arguments);
    return _ref5;
  }

  GroupManager.prototype.el = "#group-manager";

  GroupManager.prototype.htmlAddNumbers = "<button class='add-to-numbers'>Add selected group to recipients</button>";

  GroupManager.prototype.htmlAddPerson = "<button class='add-person'>Add Person</button>";

  GroupManager.prototype.htmlAddGroup = "<button class='add-group'>Add Group</button>";

  GroupManager.prototype.events = {
    "click #group-selector li": "onGroupClick",
    "click .group-edit": "onGroupEdit",
    "click .group-remove": "onGroupRemove",
    "click .add-group": "addGroup",
    "click .add-person": "addPerson",
    "change .group-name": "onGroupNameChange",
    "blur   .group-name": "onGroupNameBlur",
    "change .person-name": "onPersonChange",
    "change .person-phone": "onPersonChange",
    "change .person-tags": "onPersonChange",
    "click .person-remove": "onPersonRemove",
    "click .add-to-numbers": "addToField"
  };

  GroupManager.prototype.onPersonRemove = function(event) {
    var $target, person, personId,
      _this = this;
    $target = $(event.target);
    personId = $target.parents("li").attr('id');
    if (window.confirm("are you sure you want to remove this person?")) {
      person = this.allPeople.get(personId);
      this.allPeople.remove(personId);
      return person.destroy({
        success: function() {
          return _this.updatePeople();
        }
      });
    }
  };

  GroupManager.prototype.onPersonChange = function(event) {
    var $person, $target, person, personId;
    $target = $(event.target);
    $person = $target.parents("li");
    personId = $person.attr('id');
    person = this.allPeople.get(personId);
    return person.save({
      name: $person.find(".person-name").val(),
      phone: $person.find(".person-phone").val(),
      district: $person.find(".person-district").val(),
      designation: $person.find(".person-designation").val(),
      tags: $person.find(".person-tags").val()
    }, {
      success: function() {
        return console.log("saved");
      }
    });
  };

  GroupManager.prototype.onGroupEdit = function(event) {
    var $target, groupId;
    $target = $(event.target);
    groupId = $target.parent("li").attr('id');
    return this.editGroup(this.allGroups.get(groupId));
  };

  GroupManager.prototype.onGroupRemove = function(event) {
    var $target, group, groupId,
      _this = this;
    $target = $(event.target);
    groupId = $target.parent("li").attr('id');
    if (window.confirm("are you sure you want to remove this group?")) {
      group = this.allGroups.get(groupId);
      this.allGroups.remove(groupId);
      return group.destroy({
        success: function() {
          _this.updateGroups();
          return _this.updatePeople();
        }
      });
    }
  };

  GroupManager.prototype.onGroupNameBlur = function(event) {
    var $target, group, groupId, value;
    $target = $(event.target);
    value = $target.val();
    groupId = $target.parent("li").attr('id');
    group = this.allGroups.get(groupId);
    return this.updateGroup(group);
  };

  GroupManager.prototype.onGroupNameChange = function(event) {
    var $target, group, groupId, value,
      _this = this;
    $target = $(event.target);
    value = $target.val();
    groupId = $target.parent("li").attr('id');
    group = this.allGroups.get(groupId);
    return group.save({
      "name": value
    }, {
      success: function() {
        return _this.updateGroup(group);
      }
    });
  };

  GroupManager.prototype.onGroupClick = function(event) {
    var $target, groupId;
    $target = $(event.target);
    groupId = $target.attr('id');
    this.selected.group = this.allGroups.get(groupId);
    this.showSelected();
    this.$el.find("#people-label").html("People in \"" + (this.selected.group.escape('name')) + "\"");
    return this.updatePeople();
  };

  GroupManager.prototype.showSelected = function() {
    this.$el.find("#group-selector li").removeClass("selected");
    return this.$el.find("#" + this.selected.group.id).addClass("selected");
  };

  GroupManager.prototype.addPerson = function() {
    var person,
      _this = this;
    person = new Person;
    return person.save({
      "groupId": this.selected.group.id
    }, {
      success: function() {
        _this.allPeople.add(person);
        return _this.updatePeople();
      }
    });
  };

  GroupManager.prototype.addGroup = function() {
    var group,
      _this = this;
    group = new Group;
    return group.save(null, {
      success: function() {
        _this.allGroups.add(group);
        _this.updateGroups();
        return _this.updatePeople();
      }
    });
  };

  GroupManager.prototype.initialize = function() {
    return this.selected = {};
  };

  GroupManager.prototype.render = function() {
    var _this = this;
    this.$el.html("      <h2>Group manager</h2>      " + this.htmlAddNumbers + "<br>      <label id='groups-label'>Groups</label><br>      <ul id='group-selector'></ul>      <label id='people-label'>People</label><br>      <ul id='people'></ul>    ");
    this.allGroups = new Groups;
    return this.allGroups.fetch({
      success: function() {
        _this.selected.group = _this.allGroups.first();
        _this.allPeople = new People;
        return _this.allPeople.fetch({
          success: function() {
            _this.$el.find("#people-label").html("People in \"" + (_this.selected.group.escape('name')) + "\"");
            _this.updateGroups();
            _this.updatePeople();
            return _this.showSelected();
          }
        });
      }
    });
  };

  GroupManager.prototype.addToField = function() {
    return $("#numbers").val((this.allPeople.where({
      "groupId": this.selected.group.id
    })).map(function(a) {
      return a.attributes.phone;
    }).join("\n"));
  };

  GroupManager.prototype.updateGroups = function() {
    var group, html, _i, _len, _ref6;
    html = '';
    _ref6 = this.allGroups.models;
    for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
      group = _ref6[_i];
      html += "<li id='" + group.id + "'>" + (this.htmlGroup(group)) + "</li>";
    }
    html += "<li>" + this.htmlAddGroup + "</li>";
    return this.$el.find("#group-selector").html(html);
  };

  GroupManager.prototype.editGroup = function(group) {
    return this.$el.find("#" + group.id).html("<input type='text' class='group-name' value='" + (group.escape('name')) + "'></li>").select();
  };

  GroupManager.prototype.updateGroup = function(group) {
    return this.$el.find("#" + group.id).html(this.htmlGroup(group));
  };

  GroupManager.prototype.htmlGroup = function(group) {
    return "" + (group.get('name')) + " <span class='group-edit action'>edit</span> <span class='group-remove action'>remove</span>";
  };

  GroupManager.prototype.updatePeople = function() {
    var html, people, person, _i, _len;
    if (this.selected.group == null) {
      return this.$el.find("#people").html("No group selected");
    }
    if ((people = this.allPeople.where({
      "groupId": this.selected.group.id
    })).length === 0) {
      return this.$el.find("#people").html("      <ul>        <li>No one in group</li>        <li>" + this.htmlAddPerson + "</li>      </ul>    ");
    }
    html = '';
    for (_i = 0, _len = people.length; _i < _len; _i++) {
      person = people[_i];
      html += "        <li value='" + person.id + "' id='" + person.id + "'>          " + (this.getPersonTable(person)) + "        </li>      ";
    }
    html += "<li>" + this.htmlAddPerson + "</li>";
    return this.$el.find("#people").html(html);
  };

  GroupManager.prototype.updatePerson = function(personId) {
    return this.$el.find("#" + personId).html("        <li value='" + person.id + "' id='" + person.id + "'>          " + (this.getPersonTable(person)) + "        </li>      ");
  };

  GroupManager.prototype.onNameChange = function(event) {
    var $target, name, personId;
    $target = $(event.target);
    name = $target.val();
    return personId = $target.parent("li");
  };

  GroupManager.prototype.getPersonTable = function(person) {
    return "      <table>        <tr><th>Name</th>         <td><input type='text' class='person-name'  value='" + (person.escape('name')) + "'></td></tr>        <tr><th>Phone</th>        <td><input type='text' class='person-phone' value='" + (person.escape('phone')) + "'></td></tr>        <tr><th>District</th>     <td><input type='text' class='person-district'  value='" + (person.escape('district')) + "'></td></tr>        <tr><th>Designation</th>  <td><input type='text' class='person-designation'  value='" + (person.escape('designation')) + "'></td></tr>        <tr><th>Tags</th>         <td><input type='text' class='person-tags'  value='" + (person.escape('tags')) + "'></td></tr>        <tr><td><button class='person-remove'>remove</button></td></tr>      </table>    ";
  };

  return GroupManager;

})(Backbone.View);

Message = (function(_super) {
  __extends(Message, _super);

  function Message() {
    _ref6 = Message.__super__.constructor.apply(this, arguments);
    return _ref6;
  }

  Message.prototype.url = "message";

  return Message;

})(Backbone.Model);

SendView = (function(_super) {
  __extends(SendView, _super);

  function SendView() {
    _ref7 = SendView.__super__.constructor.apply(this, arguments);
    return _ref7;
  }

  SendView.prototype.el = "#send";

  SendView.prototype.events = {
    "click .send": "send",
    "keyup #numbers": "countNumbers",
    "keyup #text": "countCharacters",
    'click .clear-numbers': "clearNumbers",
    'click .clear-text': "clearText"
  };

  SendView.prototype.clearText = function() {
    this.$el.find("#text").val('');
    return this.countCharacters();
  };

  SendView.prototype.clearNumbers = function() {
    this.$el.find("#numbers").val('');
    return this.countNumbers();
  };

  SendView.prototype.render = function() {
    this.$el.html("    <div>      <h2>Send</h2>      <div style='margin-bottom: 2em; width:40%; display:inline-block; vertical-align:top;'>        <label for='numbers'>Phone numbers</label><br>        <span id='number-phone-numbers' class='info'></span><br>        <button class='clear-numbers'>Clear</button><br>        <textarea id='numbers' style='height:200px'></textarea>      </div>      <div style='width:40%;  display:inline-block;vertical-align:top;'>          <label for='text'>Message</label><br>          <span id='chars-left' class='info'></span><br>          <button class='clear-text'>Clear</button><br>          <textarea id='text'></textarea><br>          <button class='send'>Send</button>      </div>    </div>    ");
    this.countCharacters();
    return this.countNumbers();
  };

  SendView.prototype.send = function() {
    var number, numbers, _i, _len, _results;
    numbers = $("#numbers").val().split(/\n/);
    $("#log").append("Adding " + numbers.length + " message(s) to the outgoing message queue<br>");
    _results = [];
    for (_i = 0, _len = numbers.length; _i < _len; _i++) {
      number = numbers[_i];
      _results.push($.couch.db("pomegranate").saveDoc({
        message: $("#text").val(),
        to: number
      }));
    }
    return _results;
  };

  SendView.prototype.countNumbers = function() {
    var count, value;
    value = $("#numbers").val();
    count = 0;
    if (value.replace(/\s/g, '').length !== 0) {
      count = value.split(/([^0-9].)/).length;
    }
    return $("#number-phone-numbers").text("" + count + " numbers entered");
  };

  SendView.prototype.countCharacters = function() {
    var remaining;
    remaining = 160 - $("#text").val().length;
    return $("#chars-left").text("" + remaining + " characters left");
  };

  return SendView;

})(Backbone.View);

Pomegranate = {
  db_name: window.location.pathname.split("/")[1],
  design_doc: _.last(String(window.location).split("_design/")).split("/")[0]
};

Pomegranate.router = new Router();

Backbone.couch_connector.config.db_name = Pomegranate.db_name;

Backbone.couch_connector.config.ddoc_name = Pomegranate.design_doc;

Backbone.couch_connector.config.global_changes = false;

Backbone.history.start();

Pomegranate.debug = function(string) {
  console.log(string);
  return $("#log").append(string + "<br/>");
};

//# sourceMappingURL=router.map
